Transaction
===========
JDBC3.X version,they introduced SavePoint(I)
While performing JDBC operations,if rollback and commit operations have to applied for few
set of operations in the operations list then we need use SavePoint(I).

connection.setAutocommit(false);
	operation1
	operation2

SavePoint sp=connection.setSavePoint();//loose coupling
	operation3
	operation4
        if(balance<1000)
          connection.rollback(sp)
        else
          connection.releaseSavePoint(sp);

	operation5
           
connection.commit()

if balance<1000 ,operation3 and operation4 will be rolledBack otherwise the transaction will be
Succesfull(commit).

TransactionConcurrency
======================
When we perform Transaction,it should occur by following the principle of ACID properties

1.Atomicity
        ->Do everything or Do Nothing principle is called as Atomicity
2.Consistency
        ->Brings the changes in the state of Database from one state to another state
3.Isolation
        ->Ensusres the transaction is isolated from other transactions.
4.Durability
        ->After performing all the operation,due to catastropic failures if the system is shutdown
             it should get back the database to its original state.



    When we perform mutilple transactions on the single table concurrently then it would result
in TransactionConcurrency Problems
  1.Dirty Read problem
  2.Non Repeatable Read Problem
  3.Phantom Read Problem

To resolve these problems in JDBC Api,under Connection Interface we have few isolation Levels
which can be used to avoid the problems of TransactionConcurrency.


     

1.int TRANSACTION_READ_UNCOMMITTED = 1;
 Lowest Isolation level,which will not prevent any problems

2.int TRANSACTION_READ_COMMITTED   = 2;
      This variables ensures only commited data would be read by the other transactions,when we
perform Multiple transaction on the same table.
     It prevents only DirtyRead problem,it does not preserver NonRepeatable Read problem and Phantom read Problem

3.int TRANSACTION_REPEATABLE_READ  = 4;
     This variables ensures a lock will be applied on the result of SQL Query generated by the
transaction,so it ensures every time the same result to be given upon making the call for the 
same query.
      It prevents DirtyRead problem and also it prevents NonRepeatable Read Problem

int TRANSACTION_SERIALIZABLE     = 8;
    This variable ensures a lock will be applied on the DBE,till the first transaction gets completed with respect to the table,as a result of which the concurrent transaction facility problems can be avoided.
      It prevents all the problems associated with TransactionConcurrency


Note:Oracle Default Isolation level is::int TRANSACTION_READ_COMMITTED  
      it only supports int TRANSACTION_READ_COMMITTED  and int TRANSACTION_SERIALIZABLE= 8;
     Mysql Default Isolation level is ::int TRANSACTION_REPEATABLE_READ= 4;
       it supports all the transaction isolation level. 

ResultSetHoldability
=====================
If resultSet object is used and we peform connecion.commit(),can we perform update,delete and  insert operation or not?
a) if connection.commit is used will the resultSet object be closed or not.
      even after closing the connection object through connection.commit() and still if we want
    to perform persistence operations then we need to get the ResultSetHoldability feature.
   To get this inside the interface called ResultSet we have two variables 

interface ResultSet{
 	int HOLD_CURSORS_OVER_COMMIT = 1;
	int CLOSE_CURSORS_AT_COMMIT = 2;
}
int HOLD_CURSORS_OVER_COMMIT = 1;
   It indicates the resultSet object can be used to perform persistence operation even after calling connection.commit().This is the default value of the mysqlDB driver.

int CLOSE_CURSORS_AT_COMMIT = 2;
    It indicates the resultSet object cannot be used to perform persistence operation  after calling connection.commit().

Oracle and MysqlDatabase wont support  CLOSE_CURSORS_AT_COMMIT feature;
   





















